class Solution {
public:
    int findKRotation(vector<int>& arr) {
	  int start=0;
     int mid=0;
     int n=arr.size();
      int end=n-1;
      int next=0,prev=0;
      while(start<=end)
      {
          mid=(start+end)/2;
          next=(mid+1)%n;
          prev=(mid+n-1)%n;
          if(arr[mid]<=arr[next] && arr[mid]<=arr[prev])
          return mid;
          else if(arr[mid]<=arr[end])
          end=mid-1;
          else if(arr[start]<=arr[mid])
          start=mid+1;
      }
	
	return 0;
}
   int bs(vector<int>& arr,int start,int end,int k)
   {
       int mid=0;
      
       while(start<=end)
       {
           mid=(start+end)/2;
           if(arr[mid]==k)
           return mid;
           else if(arr[mid]>k)
           end=mid-1;
           else
           start=mid+1;
       }
       return -1;
   }
    int search(vector<int>& nums, int target) {
     
      int idx =findKRotation(nums), n = size(nums);
        int st = idx, ed = n-1;
        int ans = bs(nums,st,ed,target);
        if(ans == -1){
            st = 0, ed = idx-1;
            ans = bs(nums,st,ed,target);
        }
        return ans;
    }
};
