/* method 1 */

class Solution {
public:
    int partitionDisjoint(vector<int>& nums) {
        int i;
        vector<int>leftmax(nums.size());
        vector<int>rightmin(nums.size());
        leftmax[0]=nums[0];
        rightmin[nums.size()-1]=nums.back();
        for(i=1;i<nums.size();i++)
       {  
           leftmax[i]=max(nums[i],leftmax[i-1]);
       }
        for(i=nums.size()-2;i>=0;i--)
       {  
           rightmin[i]=min(nums[i],rightmin[i+1]);
       }
       for(i=0;i<nums.size()-1;i++)
       {   
           if(leftmax[i]<=rightmin[i+1])
           return i+1;
       }

        return -1;
    }
};

/* method 2 */
class Solution {
public:
    int partitionDisjoint(vector<int>& nums) {
        int localmax=nums[0],globalmax=nums[0],pi=0;
        for(int i=1;i<nums.size();i++)
        {
            globalmax=max(globalmax,nums[i]);
            if(localmax>nums[i])
           {
               pi=i;
               localmax=globalmax;
           }
        }
        return pi+1;
    }
};
